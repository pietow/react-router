{"version":3,"sources":["routes/Edit.js","routes/Editor.js","routes/Input.js","routes/View.js","App.js","reportWebVitals.js","index.js"],"names":["Edit","isOpen","setIsOpen","editCard","cardId","cards","useState","key","setKey","value","setValue","useEffect","Object","keys","Number","values","className","onClick","type","onChange","e","target","Editor","deleteCard","inputField","setCardId","colSpan","map","card","id","handelEditClick","to","Input","addCard","View","isFlipped","setIsFlipped","ID","setID","length","App","up","down","setCards","path","element","slice","style","padding","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.686a73ee.chunk.js","sourcesContent":["/** @format */\n\nimport { useState, useEffect } from 'react'\n\nconst Edit = ({ isOpen, setIsOpen, editCard, cardId, cards }) => {\n    const [key, setKey] = useState('')\n    const [value, setValue] = useState('')\n\n    useEffect(() => {\n        setKey(Object.keys(cards[Number(cardId)])[0])\n        setValue(Object.values(cards[Number(cardId)])[0])\n    }, [cards, cardId])\n\n    const handleClick = () => {\n        editCard(cardId, key, value)\n        setIsOpen(!isOpen)\n    }\n    return (\n        <div\n            className={\n                'fixed  inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full ' +\n                (isOpen ? '' : 'hidden')\n            }\n        >\n            <div className=\"relative top-20 mx-auto px-3 pb-3 border w-96 shadow-lg rounded-md bg-white\">\n                <div className=\"w-full flex justify-end text-2xl text-black\">\n                    <button onClick={() => setIsOpen(!isOpen)}>x</button>\n                </div>\n                <div className=\"mt-3 text-center\">\n                    <div className=\"mt-2 px-7 py-3\">\n                        <p className=\"text-sm text-gray-500\">\n                            Please change the values or leave them.\n                        </p>\n                    </div>\n                    <div className=\"flex w-full mb-4\">\n                        <input\n                            className=\"flex-shrink w-full mr-3 text-black border-2 rounded\"\n                            type=\"text\"\n                            onChange={(e) => setKey(e.target.value)}\n                            value={key}\n                        />\n                        <input\n                            className=\"flex-shrink w-full text-black border-2 rounded\"\n                            type=\"text\"\n                            onChange={(e) => setValue(e.target.value)}\n                            value={value}\n                        />\n                    </div>\n                    <div className=\"\">\n                        <button\n                            className=\"px-4 py-2 bg-yellow-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-300\"\n                            onClick={handleClick}\n                        >\n                            Edit\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Edit\n","/** @format */\n\nimport React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport Edit from './Edit'\n\nfunction Editor({ cards, deleteCard, editCard, inputField }) {\n    const [isOpen, setIsOpen] = useState(false)\n    const [cardId, setCardId] = useState(null)\n    const handelEditClick = (id) => {\n        setIsOpen(!isOpen)\n        setCardId(id)\n    }\n    return (\n        <div className=\"h-screen\">\n            <h1 className=\"mb-10 text-4xl\">Card Editor</h1>\n            <table className=\"border-2\">\n                <thead>\n                    <tr className=\"border-2\">\n                        <th className=\"border-2 p-3\">Front</th>\n                        <th className=\"border-2 p-3\">Back</th>\n                        <th colSpan=\"2\" className=\"border-2 p-3\">\n                            Action\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {cards.map((card, id) => {\n                        return (\n                            <tr key={id}>\n                                <td className=\"border-2\">\n                                    {Object.keys(card)[0]}\n                                </td>\n                                <td className=\"border-2\">\n                                    {Object.values(card)[0]}\n                                </td>\n                                <td className=\"border-2\">\n                                    <button\n                                        className=\"border-2 rounded-md bg-yellow-500 p-1 m-1\"\n                                        onClick={() => handelEditClick(id)}\n                                    >\n                                        Edit\n                                    </button>\n                                </td>\n                                <td className=\"border-2\">\n                                    <button\n                                        onClick={() => deleteCard(id)}\n                                        className=\"border-2 rounded-md bg-red-500 p-1 m-1\"\n                                    >\n                                        Delete\n                                    </button>\n                                </td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n                {inputField}\n            </table>\n\n            <div className=\"mx-auto w-11/12 grid grid-cols-1 divide-y divide-yellow-500\">\n                <div className=\"m-3\"></div>\n                <Link to=\"/view\">\n                    <button className=\"p-2 m-5 bg-green-600 border-2 rounded-md\">\n                        Card Viewer\n                    </button>\n                </Link>\n            </div>\n\n            <Edit\n                isOpen={isOpen}\n                setIsOpen={setIsOpen}\n                cardId={cardId}\n                cards={cards}\n                editCard={editCard}\n            ></Edit>\n        </div>\n    )\n}\n\nexport default Editor\n","import { useState } from \"react\"\n\nconst Input = ({ addCard }) => {\n    const [key, setKey] = useState(\"\")\n    const [value, setValue] = useState(\"\")\n\n    const clickHandler = () => {\n        addCard(key, value)\n        setKey(\"\")\n        setValue(\"\")\n    }\n\n    return (\n        <tfoot>\n            <tr>\n                <td className=\"border-2\">\n                    <input\n                        className=\"text-black border-2 rounded mx-2\"\n                        type=\"text\"\n                        onChange={(e) => setKey(e.target.value)}\n                        value={key}\n                    />\n                </td>\n                <td className=\"border-2\">\n                    <input\n                        className=\"text-black border-2 rounded mx-2\"\n                        type=\"text\"\n                        onChange={(e) => setValue(e.target.value)}\n                        value={value}\n                    />\n                </td>\n                <td colSpan=\"2\">\n                    <button\n                        onClick={clickHandler}\n                        className=\"border-2  rounded-md bg-green-500 p-1 px-10 m-1\"\n                    >\n                        Add\n                    </button>\n                </td>\n            </tr>\n        </tfoot>\n    )\n}\n\nexport default Input\n","/** @format */\nimport '../Card.css'\nimport { useState } from 'react'\nimport { Link } from 'react-router-dom'\n\nconst View = ({ cards }) => {\n    const [isFlipped, setIsFlipped] = useState(false)\n    const [ID, setID] = useState(0)\n\n    const nextC = () => {\n            setIsFlipped(false)\n            setID((ID + 1) % cards.length)\n    }\n\n    return (\n        <div className=\"w-full\">\n            <div className=\"w-3/12 mx-auto\">\n                <h1 className=\"mb-10 text-4xl\">Cards Viewer</h1>\n                <div className=\"scene mx-7\">\n                    <div\n                    className={\n                        (isFlipped ? 'is-flipped ' : '') +\n                        'card-transition card bg-white w-full relative mx-auto text-black rounded'\n                    }\n                >\n        <div className=\"card__face--front\">\n            {Object.keys(cards[ID])}\n        </div>\n        <div className=\"card__face--back\">\n            {Object.values(cards[ID])}\n        </div>\n    </div>\n</div>\n        <button\n        onClick={() => setIsFlipped(!isFlipped)}\n        className=\"border-2 border-white bg-green-400 rounded px-4 py-2 m-7\"\n    >\n            Flip!\n    </button>\n        <button\n        onClick={nextC}\n        className=\"border-2 border-white bg-green-400 rounded px-4 py-2 m-7\"\n    >\n            Next Card!\n    </button>\n        <div className=\"mx-auto w-11/12 grid grid-cols-1 divide-y divide-yellow-500\">\n            <div className=\"m-3\"></div>\n            <Link to=\"/\">\n                <button className=\"p-2 m-5 bg-green-600 border-2 rounded-md\">\n                    Card Editor\n                </button>\n            </Link>\n        </div>\n        </div>\n        </div>\n    )\n}\n\nexport default View\n","/** @format */\n\nimport './App.css'\n\nimport { Routes, Route } from 'react-router-dom'\nimport React, { useState } from 'react'\n\nimport Editor from './routes/Editor'\nimport Input from './routes/Input'\nimport View from './routes/View';\n\nfunction App() {\n    const [cards, setCards] = useState([\n        { up: 'gg' },\n        { down: 'G' },\n        { 'next word': 'w' },\n    ])\n    const addCard = (key, value) => {\n        setCards([...cards, { [key]: value }])\n    }\n    const deleteCard = (id) => {\n        setCards([...cards.slice(0, id), ...cards.slice(id + 1)])\n    }\n    const editCard = (id, key, value) => {\n        setCards([\n            ...cards.slice(0, id),\n            { [key]: value },\n            ...cards.slice(id + 1),\n        ])\n    }\n\n    return (\n        <div className=\"App flex p-32 flex-col items-center bg-gray-900 text-white h-screen\">\n            <Routes>\n                <Route\n                    path=\"/\"\n                    element={\n                        <Editor\n                            inputField={<Input addCard={addCard} />}\n                            cards={cards}\n                            deleteCard={deleteCard}\n                            editCard={editCard}\n                        />\n                    }\n                ></Route>\n                <Route path=\"/view\" element={<View cards={cards}/>}></Route>\n                <Route\n                    path=\"*\"\n                    element={\n                        <main style={{ padding: '1rem' }}>\n                            <p>There's nothing here!</p>\n                        </main>\n                    }\n                ></Route>\n            </Routes>\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            }\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { HashRouter } from \"react-router-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n    <HashRouter>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </HashRouter>,\n    document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}